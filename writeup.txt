
For the compression assignment I decided to use arithmetic coding algorithm. Initially, I was going for Huffman coding, but after doing some research I found that arithmetic coding performs better.
I haven't finished coding yet.
I am planning to subdivide original input into several parts and compress each part separately. I am hoping that alphabet required to encode each part will be smaller than of the whole input. If the space savings are large enough I will be able to exceed the overhead needed for storing each separate dictionary. I will need to test if this approach provides any benefit, and if not, I will end up using a single dictionary for the whole input.
For verifying the integrity of the file, I will use md5 checksum during decompression.

The complexity of the compression algorithm is O(N) where N is the size of the file in bytes assuming the lookup from the dictionary takes a constant time. Decompression takes a constant time as well.
In general, the arithmetic encoding is a very efficient algorithm and can be optimized to support mutli-core processors. Even though my implementation is not optimized and uses a scripting language (Javascript), it compresses "War and Piece" text in under 3 seconds.